{"version":3,"sources":["stores/ModalWindowStore.ts","stores/UserFormStore.ts","stores/store.ts","hooks/hooks.tsx","components/UserForm/UserForm.tsx","components/ModalWindow/ModalWindow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ModalWindowStore","isModalWindowOpen","this","observable","action","initialState","name","surname","UserFormStore","formFieldsValue","formFieldsData","stores","Object","freeze","userFormStore","modalWindowStore","storesContext","React","createContext","useStore","Provider","store","useContext","observer","useState","nameValue","setNameValue","surnameValue","setSurnameValue","className","onSubmit","event","preventDefault","userFormData","setUserFormData","setIsModalWindowOpen","type","value","onChange","target","placeholder","maxLength","required","ModalWindow","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yVAEaA,GAAb,mJAIE,SACqBC,GACnBC,KAAKD,kBAAoBA,MAN7B,oDACGE,KADH,yEAE+B,KAF/B,gDAIGC,KAJH,oFCCMC,EAAe,CACnBC,KAAM,GACNC,QAAS,IAEEC,GAAb,2IAIE,SACgBC,GACdP,KAAKQ,eAAiBD,MAN1B,iDACGN,KADH,yEAEgCE,KAFhC,2CAIGD,KAJH,+ECHaO,EAASC,OAAOC,OAAO,CAClCC,cAAe,IAAIN,EACnBO,iBAAkB,IAAIf,IAGXgB,EAAgBC,IAAMC,cAAcP,GCJpCQ,GDKiBH,EAAcI,SCLpB,SACtBC,GADsB,OAEDJ,IAAMK,WAAWN,GAAeK,K,cCiExCE,eA3DY,WACzB,IAAMT,EAAgBK,EAAS,iBACzBJ,EAAmBI,EAAS,oBAFH,EAIGK,mBAPP,IAGI,mBAIxBC,EAJwB,KAIbC,EAJa,OAKSF,mBARb,IAGI,mBAKxBG,EALwB,KAKVC,EALU,KA6B/B,OACE,qCACE,6BAtCoB,6IAuCpB,uBAAMC,UAAU,YAAYC,SAjBP,SAACC,GACnB,OAALA,QAAK,IAALA,KAAOC,iBACP,IAAMC,EAA4B,CAChC3B,KAAMmB,EACNlB,QAASoB,GAGXb,EAAcoB,gBAAgBD,GAC9BlB,EAAiBoB,sBAAqB,GAEtCT,EA5ByB,IA6BzBE,EA7ByB,KAmCvB,UACE,uBACEC,UAAU,aACVO,KAAK,OACLC,MAAOZ,EACPa,SA9BsB,SAACP,GAC7BL,EAAY,OAACK,QAAD,IAACA,OAAD,EAACA,EAAOQ,OAAOF,QA8BrBG,YA5Ce,qBA6CfC,UAzCyB,GA0CzBC,UAAQ,IAEV,uBACEb,UAAU,aACVO,KAAK,OACLC,MAAOV,EACPW,SAnCyB,SAACP,GAChCH,EAAe,OAACG,QAAD,IAACA,OAAD,EAACA,EAAOQ,OAAOF,QAmCxBG,YApDkB,6CAqDlBC,UAlDyB,GAmDzBC,UAAQ,IAEV,wBAAQb,UAAU,qBAAqBO,KAAK,SAA5C,SAvDmB,kDCmBZO,G,MArBe,WAC5B,IAAM7B,EAAgBK,EAAS,iBACzBJ,EAAmBI,EAAS,oBAMlC,OACE,mCACE,sBAAKU,UAAU,cAAf,UAb4B,4EAa5B,IAC+Bf,EAAcJ,eAAeJ,KAAM,IAC/DQ,EAAcJ,eAAeH,QAC9B,wBAAQsB,UAAU,uBAAuBe,QATrB,WACxB7B,EAAiBoB,sBAAqB,IAQlC,SAfkB,sDCcXZ,mBAZf,WACE,IAAMR,EAAmBI,EAAS,oBAClC,OACE,qBAAKU,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,IACCd,EAAiBd,mBAAqB,cAAC,EAAD,YCChC4C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5ef16c60.chunk.js","sourcesContent":["import { action, observable } from \"mobx\";\r\n\r\nexport class ModalWindowStore {\r\n  @observable\r\n  isModalWindowOpen: boolean = false;\r\n\r\n  @action\r\n  setIsModalWindowOpen(isModalWindowOpen: boolean): void {\r\n    this.isModalWindowOpen = isModalWindowOpen;\r\n  }\r\n}\r\n","import { IFormFields } from \"../shared/interfaces\";\r\nimport { action, observable } from \"mobx\";\r\n\r\nconst initialState = {\r\n  name: \"\",\r\n  surname: \"\",\r\n};\r\nexport class UserFormStore {\r\n  @observable\r\n  formFieldsData: IFormFields = initialState;\r\n\r\n  @action\r\n  setUserFormData(formFieldsValue: IFormFields): void {\r\n    this.formFieldsData = formFieldsValue;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { ModalWindowStore } from \"./ModalWindowStore\";\r\nimport { UserFormStore } from \"./UserFormStore\";\r\n\r\nexport const stores = Object.freeze({\r\n  userFormStore: new UserFormStore(),\r\n  modalWindowStore: new ModalWindowStore(),\r\n});\r\n\r\nexport const storesContext = React.createContext(stores);\r\nexport const StoresProvider = storesContext.Provider;\r\n","import React from \"react\";\r\nimport { stores, storesContext } from \"../stores/store\";\r\n\r\nexport const useStores = () => React.useContext(storesContext);\r\n\r\nexport const useStore = <T extends keyof typeof stores>(\r\n  store: T\r\n): typeof stores[T] => React.useContext(storesContext)[store];\r\n","import React, { useState } from \"react\";\nimport \"./UserForm.scss\";\nimport { useStore } from \"../../hooks/hooks\";\nimport { observer } from \"mobx-react-lite\";\nimport { IFormFields } from \"../../shared/interfaces\";\n\nconst DEFAULT_FORM_TEXT = \"Введите ваше имя и фамилию\";\nconst NAME_PLACEHOLDER = \"Имя\";\nconst SURNAME_PLACEHOLDER = \"Фамилия\";\nconst SUBMIT_BUTTON_NAME = \"Готово\";\nconst DEFAULT_EMPTY_STRING = \"\";\nconst DEFAULT_MAX_SURNAME_LENGTH = 20;\n\nconst UserForm: React.FC = () => {\n  const userFormStore = useStore(\"userFormStore\");\n  const modalWindowStore = useStore(\"modalWindowStore\");\n\n  const [nameValue, setNameValue] = useState(DEFAULT_EMPTY_STRING);\n  const [surnameValue, setSurnameValue] = useState(DEFAULT_EMPTY_STRING);\n\n  const handleNameInputChange = (event: any) => {\n    setNameValue(event?.target.value);\n  };\n\n  const handleSurNameInputChange = (event: any) => {\n    setSurnameValue(event?.target.value);\n  };\n\n  const handleFormSubmit = (event: any) => {\n    event?.preventDefault();\n    const userFormData: IFormFields = {\n      name: nameValue,\n      surname: surnameValue,\n    };\n\n    userFormStore.setUserFormData(userFormData);\n    modalWindowStore.setIsModalWindowOpen(true);\n\n    setNameValue(DEFAULT_EMPTY_STRING);\n    setSurnameValue(DEFAULT_EMPTY_STRING);\n  };\n\n  return (\n    <>\n      <h2>{DEFAULT_FORM_TEXT}</h2>\n      <form className=\"user_form\" onSubmit={handleFormSubmit}>\n        <input\n          className=\"input_text\"\n          type=\"text\"\n          value={nameValue}\n          onChange={handleNameInputChange}\n          placeholder={NAME_PLACEHOLDER}\n          maxLength={DEFAULT_MAX_SURNAME_LENGTH}\n          required\n        />\n        <input\n          className=\"input_text\"\n          type=\"text\"\n          value={surnameValue}\n          onChange={handleSurNameInputChange}\n          placeholder={SURNAME_PLACEHOLDER}\n          maxLength={DEFAULT_MAX_SURNAME_LENGTH}\n          required\n        />\n        <button className=\"button button_save\" type=\"submit\">\n          {SUBMIT_BUTTON_NAME}\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default observer(UserForm);\n","import React from \"react\";\nimport { useStore } from \"../../hooks/hooks\";\nimport \"./ModalWindow.scss\";\n\nconst MODAL_WINDOW_DEFAULT_TEXT = \"Здравствуйте,\";\nconst CLOSE_BUTTON_TEXT = \"Закрыть\";\n\nconst ModalWindow: React.FC = () => {\n  const userFormStore = useStore(\"userFormStore\");\n  const modalWindowStore = useStore(\"modalWindowStore\");\n\n  const handleCloseButton = () => {\n    modalWindowStore.setIsModalWindowOpen(false);\n  };\n\n  return (\n    <>\n      <div className=\"ModalWindow\">\n        {MODAL_WINDOW_DEFAULT_TEXT} {userFormStore.formFieldsData.name}{\" \"}\n        {userFormStore.formFieldsData.surname}\n        <button className=\"button button_danger\" onClick={handleCloseButton}>\n          {CLOSE_BUTTON_TEXT}\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default ModalWindow;\n","import React from \"react\";\nimport \"./App.scss\";\nimport UserForm from \"./components/UserForm/UserForm\";\nimport { observer } from \"mobx-react-lite\";\nimport ModalWindow from \"./components/ModalWindow/ModalWindow\";\nimport { useStore } from \"./hooks/hooks\";\n\nfunction App() {\n  const modalWindowStore = useStore(\"modalWindowStore\");\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <UserForm />\n        {modalWindowStore.isModalWindowOpen && <ModalWindow />}\n      </header>\n    </div>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}